{"version":3,"sources":["util/shallowEqual.js"],"names":["shallowEqual","hasOwn","Object","prototype","hasOwnProperty","objA","objB","compare","compareContext","ret","call","keysA","keys","keysB","len","length","i","key","valueA","valueB"],"mappings":";;;;;;;;;;;;;;;;;;sBAQwBA,Y;;;;;;;;AARxB;;;;;;AAMA,QAAMC,SAASC,OAAOC,SAAP,CAAiBC,cAAhC;;AAEe,aAASJ,YAAT,CAAsBK,IAAtB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAAkE;AAAA,YAAvBC,cAAuB,uEAAN,IAAM;;;AAE7E,YAAMC,MAAMF,UAAUA,QAAQG,IAAR,CAAaF,cAAb,EAA6BH,IAA7B,EAAmCC,IAAnC,CAAV,GAAqD,KAAK,CAAtE;;AAEA,YAAIG,QAAQ,KAAK,CAAjB,EAAoB;AAChB,mBAAO,CAAC,CAACA,GAAT;AACH;;AAED,YAAIJ,SAASC,IAAb,EAAmB;AACf,mBAAO,IAAP;AACH;;AAED,YACI,QAAOD,IAAP,yCAAOA,IAAP,OAAgB,QAAhB,IAA4BA,SAAS,IAArC,IACG,QAAOC,IAAP,yCAAOA,IAAP,OAAgB,QADnB,IAC+BA,SAAS,IAF5C,EAGE;AACE,mBAAO,KAAP;AACH;;AAED,YAAMK,QAAQT,OAAOU,IAAP,CAAYP,IAAZ,CAAd;AACA,YAAMQ,QAAQX,OAAOU,IAAP,CAAYN,IAAZ,CAAd;;AAEA,YAAMQ,MAAMH,MAAMI,MAAlB;;AAEA,YAAID,QAAQD,MAAME,MAAlB,EAA0B;AACtB,mBAAO,KAAP;AACH;;AAED;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,GAApB,EAAyBE,GAAzB,EAA8B;;AAE1B,gBAAMC,MAAMN,MAAMK,CAAN,CAAZ;;AAEA,gBAAME,SAASb,KAAKY,GAAL,CAAf;AACA,gBAAME,SAASb,KAAKW,GAAL,CAAf;;AAEA,gBAAMR,OAAMF,UACNA,QAAQG,IAAR,CAAaF,cAAb,EAA6BU,MAA7B,EAAqCC,MAArC,EAA6CF,GAA7C,CADM,GAEN,KAAK,CAFX;;AAIA,gBAAIR,SAAQ,KAAR,IAAiBA,SAAQ,KAAK,CAAb,IAAkBS,WAAWC,MAAlD,EAA0D;AACtD,uBAAO,KAAP;AACH;AAEJ;;AAED,eAAO,IAAP;AACH","file":"shallowEqual.js","sourcesContent":["/**\n * @file shallowEqual\n * @see https://github.com/dashed/shallowequal/blob/master/src/index.js\n * @author leon <ludafa@outlook.com>\n */\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport default function shallowEqual(objA, objB, compare, compareContext = null) {\n\n    const ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n    if (ret !== void 0) {\n        return !!ret;\n    }\n\n    if (objA === objB) {\n        return true;\n    }\n\n    if (\n        typeof objA !== 'object' || objA === null\n        || typeof objB !== 'object' || objB === null\n    ) {\n        return false;\n    }\n\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    const len = keysA.length;\n\n    if (len !== keysB.length) {\n        return false;\n    }\n\n    // Test for A's keys different from B.\n\n    for (let i = 0; i < len; i++) {\n\n        const key = keysA[i];\n\n        const valueA = objA[key];\n        const valueB = objB[key];\n\n        const ret = compare\n            ? compare.call(compareContext, valueA, valueB, key)\n            : void 0;\n\n        if (ret === false || ret === void 0 && valueA !== valueB) {\n            return false;\n        }\n\n    }\n\n    return true;\n}\n"]}